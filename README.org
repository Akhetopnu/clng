* Common lisp next generation

This document's main goal is to collect ideas and propositions about next generation CL (standard/specification/othername). This is NOT a template for a new specification, but merely a place for discussion.


Ideas should be pull requests and discussions shoudl take palce in issues. Keep in mind that many things proposed here can be contradictory to each other, resulting in several differently designed languages. However this is a step forward compared to single messages and abrupt threads spread across different random chats, blogs and formus. Surely it is time to start accumulating ideas no matter how fundamental or small they are. While main inspiration comes from Common Lisp, people contributing to this usually know more than one language.


* Motivation:

Common Lisp standard was created in 1994. The major goal was to unite many (relatively big as well as small) dialects of previous Lisp making it an ultimate successor of MacLisp Lisp series. The natural advantage of such approach is uniting community around a single project, thus getting a large amount of manpower for further development. However, as a result the developers had to try to maintain a ceratin level of backwards compatibility with all the previous existing dialects, resulting in language with different (not always consistent with each other) features and a certain historical baggage.


** Summary:
So far it seems that all suggestions can be divided into three categories -- fully backwards compatible, almost backwards compatible (with very minor refactorizations required)... and basically a new lisp lagnauge. Apparently, the new language sugesstions tend to lean towards low-level features, as the demand for high-level ones is already satisfied by high flexibility of CL.

Fully backwards compatible propositions share goal with CDR project, read below.

* Alternatives:

+ [[https://common-lisp.net/project/cdr/][CDR Project]]
  The project is mainly focused on backwards compatible suggestions, implementated incrementally.

+ Honorable mention:

[[https://www.cliki.net/Proposed%20Extensions%20To%20ANSI][List of proposed ANSI revisions]]

And there is also [[https://www.cliki.net/Proposed%20ANSI%20Revisions%20and%20Clarifications][List of clarifications]]


* Fully backwards compatible changes:

** High-level features:

*** Extensible loop

**** Details
The very reason iterate library exists. However, having a loop construct (a basic feature) as a library makes it very non obvious, especially for newcomers. The "iterate vs loop" argument, certain design choices (loop being "unlispy" vs iterate using code-walker) -- are issues to be resolved.

**** Reasoning

**** Current status

---------
*** Improved hash-tables.

**** Details
There are many possible improvements for hash-tables -- readable hash-tables, initial-values for =make-hash-table=, typed hash-tables, arbitary =:test= function for hash-tables, standard support for weak hash table keys and values.

**** Reasoning

**** Current status

---------
*** Unifyining variables declarations.

**** Details
=Let= handling multiple values biding and/or list-pattern matching. Global variables with =defglobal=, see =sb-ext:defglobal=.

**** Reasoning

**** Current status

---------
** General features:

*** Clear policy rules
**** Details
This includes, but is not limited to, TCO cases, inlining, compiler-macros expansion, general safety of =(safety 0)= etc.

**** Reasoning

**** Current status

---------
*** Standard parser for lambda and macro lambda lists.

**** Details
There are a lot of generic half-baked ones. It also may include the discussion of what can be added/changed about lambda-lists structure -- such as pattern matching.

**** Reasoning

**** Current status

---------

*** CFFI
**** Details

**** Reasoning

**** Current status

Existing one is decent but surely there are improvememnts. This part requires specific problems described.

---------

** Low-level features:

*** Equivalence functions cleanup.

**** Details
Depending on the implementation numbers sometimes are =eq= and sometimes aren't. This can be complicated for some implementations, therefore maybe this issue is rather a consequence of some other issues that should be highlighted. Some =equalp= quirks are also questionable.

**** Reasoning

**** Current status

---------

*** Unicode support
**** Details

**** Reasoning

**** Current status

---------

*** Long string literals split across lines with indentation, without involving format:
**** Details
#+BEGIN_SRC
(foo bar "this is just one \
          \ string literal with only single spaces")
#+END_SRC

As well as special characters in string literals via something analogous to \x3F, \177, \n, \t, \u+1234.

**** Reasoning

**** Current status

---------

*** Expand-full function: perform all expansion on an expression in a given macro environment. Optionally report all free variables.
**** Details

**** Reasoning

**** Current status

---------

*** Allow =eval= access to environment
**** Details
That implies eval being able to eval things that only make sense in certain environment.

**** Reasoning

**** Current status

---------
*** Security (fixing reader eval, ...)

**** Details
More security on certain areas.

**** Reasoning

**** Current status

---------

*** Compilation

**** Details
Different ways of compilation in more details, for example bloack-compilation, akin to [[https://mstmetent.blogspot.com/2020/02/block-compilation-fresh-in-sbcl-202.html][what]] is done in sbcl.

**** Reasoning

**** Current status

---------
---------
* Almost backwards compatible changes:

+ Extensible sequences

  As well as extensible data structures of different kind. The protocol for sequences is a thing to discuss.

+ Native lazy list via lazy-cons type which satisfies consp.

  While laziness can be theoretically speaking implemented as a library, the __efficient__ (that is, for production use) laziness is nontrivial to make. Thereofre, it makes sense for
  maintainers of the language to implement it (at some point) as a part of (semi-)standard library.

+ Standard library redesign

  Some thigns that are in there can be in utility libs such as alexandria, while some thigns from alexandria can be too useful to not include them.

+ Standardize the Meta-Object Protocol for CLOS

  Instead of closer-mop we should have just mop. This includes both what currently is in MOP as well as some additions -- better definition lookup, all that concerns structures etc.

+ First-class macros

  Macros that can be bound to variables, passed as arguments and returned from functions. [[http://matt.might.net/articles/metacircular-evaluation-and-first-class-run-time-macros/][A more detailed explanation.]]

+ Executables and binary files

  A standard way to build them, maybe in different forms, with/without tree shaking.

+ Sockets

  Exists in form of a [[https://github.com/usocket/trivial-sockets][library]]

+ GC finalization support: register callback for finalized object

  At least some control over it is in high demand. Better support for dynamic-extent. For more specific examples look [[https://github.com/trivial-garbage/trivial-garbage][here]].

+ Environments

  Standardtized, and a set of baisc functions to wrok with them.

+ Standardized code walking primitives: one body of user code which correctly walks all special forms.

  There is hu.dwim as a library.

+ Name conflicts

  As a compatibility [[https://github.com/phoe/trivial-package-local-nicknames][library]], [[http://www.sbcl.org/manual/#Package_002dLocal-Nicknames][here]] is how it looks for a specific implementation.

* New (presumably low-level) language:

+ Different kind of polymorphism (or none by default. but ability to implement many)

  There are several atttempts to deal with the inefficiency (in terms of raw performance and safety) of generic functions (which are good for many tasks, but not all) -- including [[https://github.com/marcoheisig/fast-generic-functions][fast-generic-functions]], [[https://github.com/markcox80/specialization-store][specialization-store]], and [[https://github.com/digikar99/adhoc-polymorphic-functions][others]]. However, there are certain limitations for all of them -- classes vs types, there are problems with parametrized types, classes cannot be parametrized etc.

  There are also attempts to do something completely different such as [[https://github.com/fare/lisp-interface-library][LIL]] -- they should not be forgotten.

+ Reader macros overhaul

  Details later.

+ Syntax

  If and where can =[]= or ={}= be introduced, slot/structure access via generalized accessor function (as in, =(slot-value (slot-value (slot-value x 'foo) 'bar) 'baz)=
  vs =x.foo.bar.baz= vs =(at x 'foo 'bar 'baz')= etc). The above-mentioned redader macros overhaul may include ways to hook into the reader itself, allowing various modifications.

+ Package (and system?) overhaul

  Resolving names at runtime, more convenient export system etc.

+ Useful accessors on macro environment objects.

+ Type system overhaul

  A lot of small and big things to add -- proper parametrized types, recursived type definitions, more strict (?) type checks and inference, the ability to adjust it so building something like [[https://github.com/stylewarning/coalton][Coalton]] would be less painful.

+ Separations into libraries: separate class system

  Separate condition system, separate data structuers library, algorithms library, math library, concurrency library, iteration library, code-walking library, ....

+ Overhaul of path names, w.r.t. current OS landscape.

  One standard way to parse a POSIX or Windows path string to a path name, or a URL. path names should have a :method for this.

+ GC

  Is GC necessary? Should we have RAII in some form instead? THere are several alternatives. Semantics of the languages depends heavily on this as well.

+ Continuations

  A powerful low-level control construct. It is up to the debate for several reasons, one of the being its [[http://www.nhplace.com/kent/PFAQ/unwind-protect-vs-continuations-original.html][interaction]] with unwind-protect.

** Is this idea new?

Of course not. Attempts to build low level C-like lisp exist, lots of them: [[https://github.com/eudoxia0/corvus][1]], [[https://github.com/tomhrr/dale][2]], [[https://github.com/kiselgra/c-mera][3]], [[https://github.com/eudoxia0/interim][4]] and there are more.
Attempts to build low-level stattically-typed lisp-like language are also well known: [[https://github.com/carp-lang/Carp][1]], [[https://github.com/u2zv1wx/neut][2]] and there are more.
Two things they presumably lack are: pre-built well defined specification and community visibility and support.


Same can be said about attempts to just upgrade exsiting CL implementation, such as famous [[https://lispcookbook.github.io/cl-cookbook/cl21.html][CL21]].


* Useful links:

[[http://nhplace.com/kent/Papers/cl-untold-story.html][Common Lisp: The Untold Story]] and [[http://nhplace.com/kent/Papers/][friends]] have a lot of useful info in them. [[https://pvk.ca/Blog/2013/11/22/the-weaknesses-of-sbcls-type-propagation/][Paul Khuong blog]] has many notes on potential compiler improvement, althoug specific to sbcl.

* Counterarguments

+ Money

+ Time

+ People






* Conclusion
 May not be written until the bulk of this document is finished.
